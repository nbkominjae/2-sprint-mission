// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  nickname     String        @unique
  image        String?
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  products     Product[]
  articles     Article[]
  comments     Comment[]
  ProductLikes ProductLike[]
  ArticleLikes ArticleLike[]
}

// 1:N
model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  price       Int
  tags        String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  comments    Comment[]
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  likes       ProductLike[]
}

model ProductLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

// 1:N
model Article {
  id        Int           @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  comments  Comment[]
  user      User          @relation(fields: [userId], references: [id])
  userId    Int
  likes     ArticleLike[]
}

model ArticleLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  articleId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  article   Article  @relation(fields: [articleId], references: [id])

  @@unique([userId, articleId])
}

model Comment {
  id         Int      @id @default(autoincrement())
  product_id Int?
  article_id Int?
  content    String
  createdAt  DateTime @default(now())
  product    Product? @relation(fields: [product_id], references: [id], onDelete: SetNull)
  article    Article? @relation(fields: [article_id], references: [id], onDelete: SetNull)
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

// N:1 FK :product_id  article_id 
